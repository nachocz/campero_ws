# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from system_monitor/CPUUsageStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import system_monitor.msg

class CPUUsageStatus(genpy.Message):
  _md5sum = "e3d0188421c1391749e86c170c349143"
  _type = "system_monitor/CPUUsageStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string status
float32 time
string load_status
#Load average in %
float32 load_avg1
float32 load_avg5
float32 load_avg15
system_monitor/CoreUsage[] cores

================================================================================
MSG: system_monitor/CoreUsage
int8 id
string status
#Speed of the core in MHz
float32 speed
# % of the core used by user/system/...
float32 user
float32 nice
float32 system
float32 idle"""
  __slots__ = ['status','time','load_status','load_avg1','load_avg5','load_avg15','cores']
  _slot_types = ['string','float32','string','float32','float32','float32','system_monitor/CoreUsage[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,time,load_status,load_avg1,load_avg5,load_avg15,cores

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CPUUsageStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
      if self.time is None:
        self.time = 0.
      if self.load_status is None:
        self.load_status = ''
      if self.load_avg1 is None:
        self.load_avg1 = 0.
      if self.load_avg5 is None:
        self.load_avg5 = 0.
      if self.load_avg15 is None:
        self.load_avg15 = 0.
      if self.cores is None:
        self.cores = []
    else:
      self.status = ''
      self.time = 0.
      self.load_status = ''
      self.load_avg1 = 0.
      self.load_avg5 = 0.
      self.load_avg15 = 0.
      self.cores = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.load_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.load_avg1, _x.load_avg5, _x.load_avg15))
      length = len(self.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.cores:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.speed, _x.user, _x.nice, _x.system, _x.idle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cores is None:
        self.cores = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (self.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.load_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.load_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.load_avg1, _x.load_avg5, _x.load_avg15,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreUsage()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.speed, _x.user, _x.nice, _x.system, _x.idle,) = _get_struct_5f().unpack(str[start:end])
        self.cores.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.load_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.load_avg1, _x.load_avg5, _x.load_avg15))
      length = len(self.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.cores:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.speed, _x.user, _x.nice, _x.system, _x.idle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cores is None:
        self.cores = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (self.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.load_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.load_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.load_avg1, _x.load_avg5, _x.load_avg15,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreUsage()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.speed, _x.user, _x.nice, _x.system, _x.idle,) = _get_struct_5f().unpack(str[start:end])
        self.cores.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
