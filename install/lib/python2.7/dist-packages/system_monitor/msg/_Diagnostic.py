# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from system_monitor/Diagnostic.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import system_monitor.msg

class Diagnostic(genpy.Message):
  _md5sum = "588f02ed6122974a83abb40dde682102"
  _type = "system_monitor/Diagnostic"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """system_monitor/DiagnosticCPUUsage diagCpuUsage
system_monitor/DiagnosticCPUTemperature diagCpuTemp
system_monitor/DiagnosticMEM diagMem
system_monitor/DiagnosticNET diagNet
system_monitor/DiagnosticHDD diagHdd

================================================================================
MSG: system_monitor/DiagnosticCPUUsage
string name
# Possible values for message: 'OK', 'Warning','Error'
string message
string hardware_id
system_monitor/CPUUsageStatus status

================================================================================
MSG: system_monitor/CPUUsageStatus
string status
float32 time
string load_status
#Load average in %
float32 load_avg1
float32 load_avg5
float32 load_avg15
system_monitor/CoreUsage[] cores

================================================================================
MSG: system_monitor/CoreUsage
int8 id
string status
#Speed of the core in MHz
float32 speed
# % of the core used by user/system/...
float32 user
float32 nice
float32 system
float32 idle
================================================================================
MSG: system_monitor/DiagnosticCPUTemperature
string name
# Possible values for message: 'OK', 'Warning','Error'
string message
string hardware_id
system_monitor/CPUTemperatureStatus status

================================================================================
MSG: system_monitor/CPUTemperatureStatus
string status
float32 time
system_monitor/CoreTemp[] cores

================================================================================
MSG: system_monitor/CoreTemp
int8 id
#Temperature of the core in DegC
float32 temp
================================================================================
MSG: system_monitor/DiagnosticMEM
string name
# Possible values for message: 'OK', 'Warning','Error'
string message
string hardware_id
system_monitor/MEMStatus status
================================================================================
MSG: system_monitor/MEMStatus
float32 time
system_monitor/Memory[] memories
#Memory space in M
int32 totalM
int32 usedM
int32 freeM
================================================================================
MSG: system_monitor/Memory
string name
#Memory space in M
#Physical w/o buffers total is zero
int32 total
int32 used
int32 free
================================================================================
MSG: system_monitor/DiagnosticNET
string name
string message
string hardware_id
system_monitor/NetStatus status

================================================================================
MSG: system_monitor/NetStatus
string status
float32 time
system_monitor/Interface[] interfaces
================================================================================
MSG: system_monitor/Interface
string name
string state
#input/output speed in MB/s
float32 input
float32 output
int32 mtu
#Data received/transmitted in MB
float32 received
float32 transmitted
int32 collisions
int32 rxError
int32 txError

================================================================================
MSG: system_monitor/DiagnosticHDD
string name
# Possible values for message: 'OK', 'Warning','Error'
string message
string hardware_id
system_monitor/HDDStatus status

================================================================================
MSG: system_monitor/HDDStatus
string status
float32 time
string space_reading
system_monitor/Disk[] disks

================================================================================
MSG: system_monitor/Disk
int8 id
string name
string status
string mount_point
#Size of the disk in G
float32 size
float32 available
#% of total size used
float32 use
"""
  __slots__ = ['diagCpuUsage','diagCpuTemp','diagMem','diagNet','diagHdd']
  _slot_types = ['system_monitor/DiagnosticCPUUsage','system_monitor/DiagnosticCPUTemperature','system_monitor/DiagnosticMEM','system_monitor/DiagnosticNET','system_monitor/DiagnosticHDD']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       diagCpuUsage,diagCpuTemp,diagMem,diagNet,diagHdd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Diagnostic, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.diagCpuUsage is None:
        self.diagCpuUsage = system_monitor.msg.DiagnosticCPUUsage()
      if self.diagCpuTemp is None:
        self.diagCpuTemp = system_monitor.msg.DiagnosticCPUTemperature()
      if self.diagMem is None:
        self.diagMem = system_monitor.msg.DiagnosticMEM()
      if self.diagNet is None:
        self.diagNet = system_monitor.msg.DiagnosticNET()
      if self.diagHdd is None:
        self.diagHdd = system_monitor.msg.DiagnosticHDD()
    else:
      self.diagCpuUsage = system_monitor.msg.DiagnosticCPUUsage()
      self.diagCpuTemp = system_monitor.msg.DiagnosticCPUTemperature()
      self.diagMem = system_monitor.msg.DiagnosticMEM()
      self.diagNet = system_monitor.msg.DiagnosticNET()
      self.diagHdd = system_monitor.msg.DiagnosticHDD()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.diagCpuUsage.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.status.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.diagCpuUsage.status.load_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.diagCpuUsage.status.load_avg1, _x.diagCpuUsage.status.load_avg5, _x.diagCpuUsage.status.load_avg15))
      length = len(self.diagCpuUsage.status.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagCpuUsage.status.cores:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.speed, _x.user, _x.nice, _x.system, _x.idle))
      _x = self.diagCpuTemp.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagCpuTemp.status.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagCpuTemp.status.cores:
        _x = val1
        buff.write(_get_struct_bf().pack(_x.id, _x.temp))
      _x = self.diagMem.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagMem.status.memories)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagMem.status.memories:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.total, _x.used, _x.free))
      _x = self
      buff.write(_get_struct_3i().pack(_x.diagMem.status.totalM, _x.diagMem.status.usedM, _x.diagMem.status.freeM))
      _x = self.diagNet.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagNet.status.interfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagNet.status.interfaces:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi2f3i().pack(_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError))
      _x = self.diagHdd.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.status.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.diagHdd.status.space_reading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.diagHdd.status.disks)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagHdd.status.disks:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.mount_point
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.size, _x.available, _x.use))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.diagCpuUsage is None:
        self.diagCpuUsage = system_monitor.msg.DiagnosticCPUUsage()
      if self.diagCpuTemp is None:
        self.diagCpuTemp = system_monitor.msg.DiagnosticCPUTemperature()
      if self.diagMem is None:
        self.diagMem = system_monitor.msg.DiagnosticMEM()
      if self.diagNet is None:
        self.diagNet = system_monitor.msg.DiagnosticNET()
      if self.diagHdd is None:
        self.diagHdd = system_monitor.msg.DiagnosticHDD()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.status.status = str[start:end]
      start = end
      end += 4
      (self.diagCpuUsage.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.status.load_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.status.load_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diagCpuUsage.status.load_avg1, _x.diagCpuUsage.status.load_avg5, _x.diagCpuUsage.status.load_avg15,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagCpuUsage.status.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreUsage()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.speed, _x.user, _x.nice, _x.system, _x.idle,) = _get_struct_5f().unpack(str[start:end])
        self.diagCpuUsage.status.cores.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.status.status = str[start:end]
      start = end
      end += 4
      (self.diagCpuTemp.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagCpuTemp.status.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreTemp()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.temp,) = _get_struct_bf().unpack(str[start:end])
        self.diagCpuTemp.status.cores.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.hardware_id = str[start:end]
      start = end
      end += 4
      (self.diagMem.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagMem.status.memories = []
      for i in range(0, length):
        val1 = system_monitor.msg.Memory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.total, _x.used, _x.free,) = _get_struct_3i().unpack(str[start:end])
        self.diagMem.status.memories.append(val1)
      _x = self
      start = end
      end += 12
      (_x.diagMem.status.totalM, _x.diagMem.status.usedM, _x.diagMem.status.freeM,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.status.status = str[start:end]
      start = end
      end += 4
      (self.diagNet.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagNet.status.interfaces = []
      for i in range(0, length):
        val1 = system_monitor.msg.Interface()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.state = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError,) = _get_struct_2fi2f3i().unpack(str[start:end])
        self.diagNet.status.interfaces.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.status.status = str[start:end]
      start = end
      end += 4
      (self.diagHdd.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.status.space_reading = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.status.space_reading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagHdd.status.disks = []
      for i in range(0, length):
        val1 = system_monitor.msg.Disk()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mount_point = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.mount_point = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.size, _x.available, _x.use,) = _get_struct_3f().unpack(str[start:end])
        self.diagHdd.status.disks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.diagCpuUsage.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuUsage.status.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.diagCpuUsage.status.load_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.diagCpuUsage.status.load_avg1, _x.diagCpuUsage.status.load_avg5, _x.diagCpuUsage.status.load_avg15))
      length = len(self.diagCpuUsage.status.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagCpuUsage.status.cores:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_5f().pack(_x.speed, _x.user, _x.nice, _x.system, _x.idle))
      _x = self.diagCpuTemp.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagCpuTemp.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagCpuTemp.status.cores)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagCpuTemp.status.cores:
        _x = val1
        buff.write(_get_struct_bf().pack(_x.id, _x.temp))
      _x = self.diagMem.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagMem.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagMem.status.memories)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagMem.status.memories:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.total, _x.used, _x.free))
      _x = self
      buff.write(_get_struct_3i().pack(_x.diagMem.status.totalM, _x.diagMem.status.usedM, _x.diagMem.status.freeM))
      _x = self.diagNet.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagNet.status.time
      buff.write(_get_struct_f().pack(_x))
      length = len(self.diagNet.status.interfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagNet.status.interfaces:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fi2f3i().pack(_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError))
      _x = self.diagHdd.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.diagHdd.status.time
      buff.write(_get_struct_f().pack(_x))
      _x = self.diagHdd.status.space_reading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.diagHdd.status.disks)
      buff.write(_struct_I.pack(length))
      for val1 in self.diagHdd.status.disks:
        _x = val1.id
        buff.write(_get_struct_b().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.mount_point
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.size, _x.available, _x.use))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.diagCpuUsage is None:
        self.diagCpuUsage = system_monitor.msg.DiagnosticCPUUsage()
      if self.diagCpuTemp is None:
        self.diagCpuTemp = system_monitor.msg.DiagnosticCPUTemperature()
      if self.diagMem is None:
        self.diagMem = system_monitor.msg.DiagnosticMEM()
      if self.diagNet is None:
        self.diagNet = system_monitor.msg.DiagnosticNET()
      if self.diagHdd is None:
        self.diagHdd = system_monitor.msg.DiagnosticHDD()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.status.status = str[start:end]
      start = end
      end += 4
      (self.diagCpuUsage.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuUsage.status.load_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuUsage.status.load_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diagCpuUsage.status.load_avg1, _x.diagCpuUsage.status.load_avg5, _x.diagCpuUsage.status.load_avg15,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagCpuUsage.status.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreUsage()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        _x = val1
        start = end
        end += 20
        (_x.speed, _x.user, _x.nice, _x.system, _x.idle,) = _get_struct_5f().unpack(str[start:end])
        self.diagCpuUsage.status.cores.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagCpuTemp.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagCpuTemp.status.status = str[start:end]
      start = end
      end += 4
      (self.diagCpuTemp.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagCpuTemp.status.cores = []
      for i in range(0, length):
        val1 = system_monitor.msg.CoreTemp()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.temp,) = _get_struct_bf().unpack(str[start:end])
        self.diagCpuTemp.status.cores.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagMem.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagMem.hardware_id = str[start:end]
      start = end
      end += 4
      (self.diagMem.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagMem.status.memories = []
      for i in range(0, length):
        val1 = system_monitor.msg.Memory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.total, _x.used, _x.free,) = _get_struct_3i().unpack(str[start:end])
        self.diagMem.status.memories.append(val1)
      _x = self
      start = end
      end += 12
      (_x.diagMem.status.totalM, _x.diagMem.status.usedM, _x.diagMem.status.freeM,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagNet.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagNet.status.status = str[start:end]
      start = end
      end += 4
      (self.diagNet.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagNet.status.interfaces = []
      for i in range(0, length):
        val1 = system_monitor.msg.Interface()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.state = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError,) = _get_struct_2fi2f3i().unpack(str[start:end])
        self.diagNet.status.interfaces.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.status.status = str[start:end]
      start = end
      end += 4
      (self.diagHdd.status.time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.diagHdd.status.space_reading = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.diagHdd.status.space_reading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diagHdd.status.disks = []
      for i in range(0, length):
        val1 = system_monitor.msg.Disk()
        start = end
        end += 1
        (val1.id,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.status = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mount_point = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.mount_point = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.size, _x.available, _x.use,) = _get_struct_3f().unpack(str[start:end])
        self.diagHdd.status.disks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi2f3i = None
def _get_struct_2fi2f3i():
    global _struct_2fi2f3i
    if _struct_2fi2f3i is None:
        _struct_2fi2f3i = struct.Struct("<2fi2f3i")
    return _struct_2fi2f3i
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_bf = None
def _get_struct_bf():
    global _struct_bf
    if _struct_bf is None:
        _struct_bf = struct.Struct("<bf")
    return _struct_bf
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
