# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_nav_manager/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotnik_msgs.msg

class State(genpy.Message):
  _md5sum = "fb3247a8a50c3079508d6ddd0c93c134"
  _type = "map_nav_manager/State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """robotnik_msgs/State state
string substate
bool mapping
bool navigation
bool localization
bool map_server

================================================================================
MSG: robotnik_msgs/State
# constants
int32 INIT_STATE = 100
int32 STANDBY_STATE = 200
int32 READY_STATE = 300
int32 EMERGENCY_STATE = 400
int32 FAILURE_STATE = 500
int32 SHUTDOWN_STATE = 600
int32 UNKOWN_STATE = 700

# state of the component
int32 state
# desired control loop frecuency
float32 desired_freq
# real frecuency 
float32 real_freq
# Description of the state
string state_description
"""
  __slots__ = ['state','substate','mapping','navigation','localization','map_server']
  _slot_types = ['robotnik_msgs/State','string','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,substate,mapping,navigation,localization,map_server

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = robotnik_msgs.msg.State()
      if self.substate is None:
        self.substate = ''
      if self.mapping is None:
        self.mapping = False
      if self.navigation is None:
        self.navigation = False
      if self.localization is None:
        self.localization = False
      if self.map_server is None:
        self.map_server = False
    else:
      self.state = robotnik_msgs.msg.State()
      self.substate = ''
      self.mapping = False
      self.navigation = False
      self.localization = False
      self.map_server = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2f().pack(_x.state.state, _x.state.desired_freq, _x.state.real_freq))
      _x = self.state.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.substate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.mapping, _x.navigation, _x.localization, _x.map_server))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = robotnik_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.state, _x.state.desired_freq, _x.state.real_freq,) = _get_struct_i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.state_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.state_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.substate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.substate = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.mapping, _x.navigation, _x.localization, _x.map_server,) = _get_struct_4B().unpack(str[start:end])
      self.mapping = bool(self.mapping)
      self.navigation = bool(self.navigation)
      self.localization = bool(self.localization)
      self.map_server = bool(self.map_server)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2f().pack(_x.state.state, _x.state.desired_freq, _x.state.real_freq))
      _x = self.state.state_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.substate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.mapping, _x.navigation, _x.localization, _x.map_server))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = robotnik_msgs.msg.State()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.state, _x.state.desired_freq, _x.state.real_freq,) = _get_struct_i2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.state_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.state_description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.substate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.substate = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.mapping, _x.navigation, _x.localization, _x.map_server,) = _get_struct_4B().unpack(str[start:end])
      self.mapping = bool(self.mapping)
      self.navigation = bool(self.navigation)
      self.localization = bool(self.localization)
      self.map_server = bool(self.map_server)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_i2f = None
def _get_struct_i2f():
    global _struct_i2f
    if _struct_i2f is None:
        _struct_i2f = struct.Struct("<i2f")
    return _struct_i2f
