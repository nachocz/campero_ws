# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from system_monitor/Interface.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Interface(genpy.Message):
  _md5sum = "5b547a89cc3995f4c9d69adede1755a6"
  _type = "system_monitor/Interface"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
string state
#input/output speed in MB/s
float32 input
float32 output
int32 mtu
#Data received/transmitted in MB
float32 received
float32 transmitted
int32 collisions
int32 rxError
int32 txError
"""
  __slots__ = ['name','state','input','output','mtu','received','transmitted','collisions','rxError','txError']
  _slot_types = ['string','string','float32','float32','int32','float32','float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,state,input,output,mtu,received,transmitted,collisions,rxError,txError

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Interface, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.state is None:
        self.state = ''
      if self.input is None:
        self.input = 0.
      if self.output is None:
        self.output = 0.
      if self.mtu is None:
        self.mtu = 0
      if self.received is None:
        self.received = 0.
      if self.transmitted is None:
        self.transmitted = 0.
      if self.collisions is None:
        self.collisions = 0
      if self.rxError is None:
        self.rxError = 0
      if self.txError is None:
        self.txError = 0
    else:
      self.name = ''
      self.state = ''
      self.input = 0.
      self.output = 0.
      self.mtu = 0
      self.received = 0.
      self.transmitted = 0.
      self.collisions = 0
      self.rxError = 0
      self.txError = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fi2f3i().pack(_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError,) = _get_struct_2fi2f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fi2f3i().pack(_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input, _x.output, _x.mtu, _x.received, _x.transmitted, _x.collisions, _x.rxError, _x.txError,) = _get_struct_2fi2f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi2f3i = None
def _get_struct_2fi2f3i():
    global _struct_2fi2f3i
    if _struct_2fi2f3i is None:
        _struct_2fi2f3i = struct.Struct("<2fi2f3i")
    return _struct_2fi2f3i
